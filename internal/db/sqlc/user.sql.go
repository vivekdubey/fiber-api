// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
	"time"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (
  first_name
) VALUES (
  $1
)
RETURNING id, first_name, created_at, last_activity
`

func (q *Queries) AddUser(ctx context.Context, firstName string) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser, firstName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.CreatedAt,
		&i.LastActivity,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, created_at, last_activity FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.CreatedAt,
		&i.LastActivity,
	)
	return i, err
}

const updateLastActivity = `-- name: UpdateLastActivity :one
UPDATE users
  set last_activity = $2
WHERE id = $1
RETURNING id, first_name, created_at, last_activity
`

type UpdateLastActivityParams struct {
	ID           int64     `json:"id"`
	LastActivity time.Time `json:"last_activity"`
}

func (q *Queries) UpdateLastActivity(ctx context.Context, arg UpdateLastActivityParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateLastActivity, arg.ID, arg.LastActivity)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.CreatedAt,
		&i.LastActivity,
	)
	return i, err
}
